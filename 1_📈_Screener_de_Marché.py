# ==============================================================================
# PAGE D'ACCUEIL : SCREENER DE MARCH√â (V0.3 - GESTION AM√âLIOR√âE DES TIMEOUTS)
# ==============================================================================

import streamlit as st
import requests
import pandas as pd
import time

# --- Configuration de la Page ---
st.set_page_config(
    page_title="Screener BRVM",
    page_icon="üìà",
    layout="wide"
)

# --- Variables Globales ---
API_URL = "https://brvm-api-gateway.onrender.com"

# --- Fonction de Requ√™te API avec Retry ---
def api_request_with_retry(url: str, retries: int = 3, delay: int = 15, timeout: int = 45):
    """
    Effectue une requ√™te GET avec plusieurs tentatives, en laissant le temps
    √† une API "endormie" de se r√©veiller.
    """
    for i in range(retries):
        try:
            response = requests.get(url, timeout=timeout)
            response.raise_for_status() # L√®ve une exception si la requ√™te √©choue (ex: 404, 502, 503)
            return response.json()
        except requests.exceptions.RequestException as e:
            st.warning(f"L'API est peut-√™tre en cours de d√©marrage... Tentative {i + 1}/{retries}. R√©essai dans {delay} secondes.")
            time.sleep(delay) # Attendre plus longtemps entre les tentatives
    
    st.error(f"Impossible de joindre l'API apr√®s {retries} tentatives. Le service est peut-√™tre indisponible ou en maintenance.")
    return None

# --- Chargement des Donn√©es ---
@st.cache_data(ttl=300) # Mettre en cache les donn√©es du screener pour 5 minutes
def get_screener_data():
    """R√©cup√®re les donn√©es du screener depuis l'API."""
    return api_request_with_retry(f"{API_URL}/screener/")

# --- Interface Utilisateur ---
st.title("üìà Screener de March√© BRVM")
st.markdown("Vue d'ensemble des derniers signaux techniques pour toutes les soci√©t√©s cot√©es.")

# Afficher un message de chargement pendant la r√©cup√©ration des donn√©es
with st.spinner("Connexion √† l'API et chargement des donn√©es du march√©..."):
    screener_data = get_screener_data()

if screener_data:
    # Cr√©er un DataFrame Pandas √† partir des donn√©es JSON de l'API
    df = pd.DataFrame(screener_data)
    
    # Renommer les colonnes pour un affichage plus convivial
    df = df.rename(columns={
        "symbol": "Symbole",
        "name": "Soci√©t√©",
        "last_price": "Dernier Cours (FCFA)",
        "signal_mm": "Moyennes Mobiles",
        "signal_bollinger": "Bandes Bollinger",
        "signal_macd": "MACD",
        "signal_rsi": "RSI",
        "signal_stochastic": "Stochastique"
    })
    
    # Ordonner les colonnes pour une meilleure lecture
    column_order = [
        "Symbole", "Soci√©t√©", "Dernier Cours (FCFA)", "Moyennes Mobiles", 
        "Bandes Bollinger", "MACD", "RSI", "Stochastique"
    ]
    df = df[column_order]

    # Fonction pour colorer les cellules en fonction du signal
    def color_signals(val):
        if isinstance(val, str):
            val_lower = val.lower()
            if 'achat' in val_lower:
                return 'background-color: #d4edda; color: #155724' # Vert
            elif 'vente' in val_lower:
                return 'background-color: #f8d7da; color: #721c24' # Rouge
            elif 'neutre' in val_lower:
                return 'background-color: #fff3cd; color: #856404' # Jaune
        return ''

    # Afficher le tableau interactif avec la mise en forme conditionnelle
    st.dataframe(
        df.style.apply(lambda s: s.map(color_signals), subset=['Moyennes Mobiles', 'Bandes Bollinger', 'MACD', 'RSI', 'Stochastique']),
        use_container_width=True,
        height=800,
        hide_index=True
    )
    
    st.info("üí° **Astuce :** Cliquez sur les en-t√™tes de colonnes pour trier le tableau. Utilisez la page 'Analyse D√©taill√©e' dans le menu de gauche pour approfondir l'analyse d'une soci√©t√©.")
else:
    st.error("Impossible de charger les donn√©es du screener. L'API n'a pas r√©pondu. Veuillez r√©essayer de rafra√Æchir la page dans une minute.")

st.markdown("---")
st.caption("Donn√©es fournies par l'API BRVM Analysis Gateway.")
